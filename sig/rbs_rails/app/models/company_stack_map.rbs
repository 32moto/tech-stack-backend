class CompanyStackMap < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[CompanyStackMap, ActiveRecord_Relation, Integer]

  attr_accessor id(): Integer
  def id_changed?: () -> bool
  def id_change: () -> [ Integer?, Integer? ]
  def id_will_change!: () -> void
  def id_was: () -> Integer?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[Integer?]?
  def id_previously_was: () -> Integer?
  def id_before_last_save: () -> Integer?
  def id_change_to_be_saved: () -> Array[Integer?]?
  def id_in_database: () -> Integer?
  def saved_change_to_id: () -> Array[Integer?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor company_id(): Integer
  def company_id_changed?: () -> bool
  def company_id_change: () -> [ Integer?, Integer? ]
  def company_id_will_change!: () -> void
  def company_id_was: () -> Integer?
  def company_id_previously_changed?: () -> bool
  def company_id_previous_change: () -> Array[Integer?]?
  def company_id_previously_was: () -> Integer?
  def company_id_before_last_save: () -> Integer?
  def company_id_change_to_be_saved: () -> Array[Integer?]?
  def company_id_in_database: () -> Integer?
  def saved_change_to_company_id: () -> Array[Integer?]?
  def saved_change_to_company_id?: () -> bool
  def will_save_change_to_company_id?: () -> bool
  def restore_company_id!: () -> void
  def clear_company_id_change: () -> void

  attr_accessor stack_id(): Integer
  def stack_id_changed?: () -> bool
  def stack_id_change: () -> [ Integer?, Integer? ]
  def stack_id_will_change!: () -> void
  def stack_id_was: () -> Integer?
  def stack_id_previously_changed?: () -> bool
  def stack_id_previous_change: () -> Array[Integer?]?
  def stack_id_previously_was: () -> Integer?
  def stack_id_before_last_save: () -> Integer?
  def stack_id_change_to_be_saved: () -> Array[Integer?]?
  def stack_id_in_database: () -> Integer?
  def saved_change_to_stack_id: () -> Array[Integer?]?
  def saved_change_to_stack_id?: () -> bool
  def will_save_change_to_stack_id?: () -> bool
  def restore_stack_id!: () -> void
  def clear_stack_id_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  def company: () -> Company
  def company=: (Company?) -> Company?
  def build_company: (untyped) -> Company
  def create_company: (untyped) -> Company
  def create_company!: (untyped) -> Company
  def reload_company: () -> Company?
  def stack: () -> Stack
  def stack=: (Stack?) -> Stack?
  def build_stack: (untyped) -> Stack
  def create_stack: (untyped) -> Stack
  def create_stack!: (untyped) -> Stack
  def reload_stack: () -> Stack?

  class ActiveRecord_Relation < ActiveRecord::Relation
    include _ActiveRecord_Relation[CompanyStackMap, Integer]
    include Enumerable[CompanyStackMap]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  end
end
